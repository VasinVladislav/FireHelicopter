from utils import randcell
import os

# –°–æ–∑–¥–∞—ë–º –≤–µ—Ä—Ç–æ–ª—ë—Ç
class Helicopter:

    # –ò–Ω–∏—Ü–∏–∞–ª—å–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≤–µ—Ä—Ç–æ–ª—ë—Ç, –≤–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
    def __init__(self, mapX, mapY):
        rc = randcell(mapX, mapY)   # –ø–æ—è–≤–ª—è–µ–º—Å—è –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –º–µ—Å—Ç–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
        rx, ry = rc[0], rc[1]
        self.mapX, self.mapY = mapX, mapY   # –ø—Ä–∏–∑–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ —Ç.–∫. –æ–Ω–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º 
        self.hx, self.hy = rx, ry   # –Ω–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ç–æ–ª—ë—Ç–∞
        self.tank = 0   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –±–∞–∫–µ
        self.maxtank = 1    # –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–∞–∫–∞ —Å –≤–æ–¥–æ–π
        self.score = 0     # –æ—á–∫–∏ –∑–∞ —Ç—É—à–µ–Ω–∏–µ/—Å–≥–æ—Ä–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        self.hp = 2    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π
        self.maxhp = 3     # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        self.save_tree = 0     # —Å–ø–∞—Å—ë–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è
        self.burn_tree = 0     # –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è
        
    # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–µ—Ä—Ç–æ–ª—ë—Ç–∞
    def move(self, dx, dy):    # –ø—Ä–∏–Ω–µ–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–º–µ—â–µ–Ω–∏—è (–≤–≤–µ—Ä—Ö –≤–Ω–∏–∑ –≤–ª–µ–≤–æ –≤–ø—Ä–∞–≤–æ)
        nx = self.hx + dx   # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        ny = self.hy + dy
        if (0 <= nx < self.mapX) and (0 <= ny < self.mapY):  # –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–∏–¥–µ–ª—ã –∫–∞—Ä—Ç—ã...
            self.hx = nx    # ...—Ç–æ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ç–æ–ª—ë—Ç–∞ –Ω–æ–≤—ã–º–∏
            self.hy = ny

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    def print_stats(self):        
        print("üíß ", self.tank, "/ ", self.maxtank, sep = "", end = " | ")
        print("üèÜ ", self.score, sep = "", end = " | ")
        print("‚ù§Ô∏è" * self.hp, end = "")
        print("üñ§" * (self.maxhp - self.hp), end = " | ")
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: R | –ó–∞–≥—Ä—É–∑–∫–∞: G")

    # "–≠–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏"
    def you_dead(self):
        print("‚¨õ" * 13)
        print("‚¨õ", "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê") 
        print("‚¨õ", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è") if self.hp == 0 else print("‚¨õ", "–ø–ª–æ—Ö–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print("‚¨õ" * 13)   
        print("‚¨õ", "–°–ø–∞—Å–µ–Ω–æ –¥–µ—Ä–µ–≤—å–µ–≤ üå≥:", self.save_tree)
        print("‚¨õ", "–°–≥–æ—Ä–µ–ª–æ –¥–µ—Ä–µ–≤—å–µ–≤ üî•:", self.burn_tree)
        print("‚¨õ" * 13)
        if self.score > 0:
            print("‚¨õ","–ò—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ üèÜ:", self.score)
            print("‚¨õ" * 13)          
        exit(0)    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
 
    # —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    def export_data(self):
        return {
            "score": self.score, "save_tree": self.save_tree, "burn_tree": self.burn_tree,
            "hp":  self.hp,
            "hx": self.hx, "hy": self.hy,
            "tank": self.tank, "maxtank": self.maxtank
            }
    
    # –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    def import_data(self, data):
        self.hx = data["hx"] or 0
        self.hy = data["hy"] or 0
        self.hp = data["hp"] or 2
        self.tank = data["tank"] or 0
        self.maxtank = data["maxtank"] or 1
        self.score = data["score"] or 0
        self.save_tree = data["save_tree"] or 0
        self.burn_tree = data["burn_tree"] or 0